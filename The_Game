#  A simple Tic-Tac-Toe game
# Players 'X' and 'O' take turn inputing their position on the command line using numbers 1-9
# 1 | 2 | 3
# ---------
# 4 | 5 | 6
# ---------
# 7 | 8 | 9
#


# The Game Board 
board = {
    1: ' ', 2: ' ', 3: ' ',
    4: ' ', 5: ' ', 6: ' ',
    7: ' ', 8: ' ', 9: ' '
}

# TODO: update the gameboard with the user input
def markBoard(position, mark):
    position = int(position)

    if board[position] == ' ':
        board[position] = mark


# TODO: print the game board as described at the top of this code skeleton
# Will not be tested in Part 1
def printBoard():
    userBoard = {
    1: ' ', 2: ' ', 3: ' ',
    4: ' ', 5: ' ', 6: ' ',
    7: ' ', 8: ' ', 9: ' '
    }

    for k in board.keys():
        if board[k] == ' ':
            userBoard[k] = k
        else:
            userBoard[k] = board[k]
    
    d = '|'
    print(userBoard[1], d,  userBoard[2], d, userBoard[3])
    print(' --------- ')
    print(userBoard[4], d,  userBoard[5], d, userBoard[6])
    print(' --------- ')
    print(userBoard[7], d,  userBoard[8], d, userBoard[9])


# TODO: check for wrong input, this function should return True or False.
# True denoting that the user input is correct
# you will need to check for wrong input (user is entering invalid position) or position is out of bound
# another case is that the position is already occupied
def validateMove(position):
    if position.isalpha() == False:
        position = int(position)
        if position>=1 and position<=9:
            if board[position] == ' ':
                return True
    
    return False

# TODO: list out all the combinations of winning, you will neeed this
# one of the winning combinations is already done for you
winCombinations = [
    [1, 2, 3], 
    [4, 5, 6], 
    [7, 8, 9], 
    [1, 4, 7], 
    [2, 5, 8], 
    [3, 6, 9], 
    [1, 5, 9], 
    [3, 5, 7]
]

# TODO: implement a logic to check if the previous winner just win
# This method should return with True or False
def checkWin(player):
  for com in winCombinations:
    if board[com[0]] == player and board[com[1]] == player and board[com[2]] == player:
      return True

  return False


# TODO: implement a function to check if the game board is already full
# For tic-tac-toe, tie bascially means the whole board is already occupied
# This function should return with boolean
def checkFull():
    statement = []

    for value in board.values():
        if value != ' ':
            statement.append(True)
        else:
            statement.append(False)

    if False in statement:
        return False
    else:
        return True



#########################################################
## Copy all your code/fucntions in Part 1 to above lines
## (Without Test Cases)
#########################################################

gameEnded = False
currentTurnPlayer = 'X'

# entry point of the whole program
print('Game started: \n\n' +
    ' 1 | 2 | 3 \n' +
    ' --------- \n' +
    ' 4 | 5 | 6 \n' +
    ' --------- \n' +
    ' 7 | 8 | 9 \n')

# TODO: Complete the game play logic below
# You could reference the following flow
# 1. Ask for user input and validate the input
# 2. Update the board
# 3. Check win or tie situation
# 4. Switch User
while not gameEnded:
    move = input(currentTurnPlayer + "'s turn, input: ")

    if validateMove(move) == False:
        print("Invalid move. Try again.")
        move = input(currentTurnPlayer + "'s turn, input: ")

    markBoard(move, currentTurnPlayer)
    printBoard()
    
    if checkWin(currentTurnPlayer) == True or checkFull() == True:
        if checkFull() == True:
            print("It's a tie. No one wins.")
            print("Play again?\nEnter any key to continue or 'N' to exit.")
            user = input()
            if user == 'N':
                break
            else:
                for k in board.keys():
                    board[k] = ' '
                print('Game started: \n\n' +
                        ' 1 | 2 | 3 \n' +
                        ' --------- \n' +
                        ' 4 | 5 | 6 \n' +
                        ' --------- \n' +
                        ' 7 | 8 | 9 \n')
                continue
        else:
            print(currentTurnPlayer + " wins!")
            print("Play again?\nEnter any key to continue or 'N' to exit.")
            user = input()
            if user == 'N':
                break
            else:
                for k in board.keys():
                    board[k] = ' '
                print('Game started: \n\n' +
                        ' 1 | 2 | 3 \n' +
                        ' --------- \n' +
                        ' 4 | 5 | 6 \n' +
                        ' --------- \n' +
                        ' 7 | 8 | 9 \n')
                continue
    else:
        if currentTurnPlayer == 'X':
            currentTurnPlayer = 'O'
        
        else:
            currentTurnPlayer = 'X'



# Bonus Point: Implement the feature for the user to restart the game after a tie or game over
